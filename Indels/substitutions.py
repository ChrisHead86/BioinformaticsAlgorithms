# -*- coding: utf-8 -*-
"""CS C122 Project 1a Second Try.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18NDLPLM9mk6_iJqlqfwnM24zRwdzOIbB
"""

import sys
print(sys.version)

from Bio import SeqIO
import pandas as pd
import zipfile

def read_fasta(file_path):
    sequences = {}
    for record in SeqIO.parse(file_path, "fasta"):
        sequences[record.id] = str(record.seq)
    return sequences

def find_best_alignment(genome, read):
    min_differences = float('inf')
    best_index = -1

    for i in range(len(genome) - len(read) + 1):
        differences = sum(genome[i + j] != read[j] for j in range(len(read)))
        if differences < min_differences:
            min_differences = differences
            best_index = i

    return best_index, min_differences

genome_file_path = 'project1a_no_repeats_reference_genome.fasta'
reads_file_path = 'project1a_no_repeats_with_error_paired_reads.fasta'


genome_sequence = read_fasta(genome_file_path)["genome"]

paired_reads = read_fasta(reads_file_path)


best_alignments = {}

for read_id, read_sequence in paired_reads.items():
    best_index, min_differences = find_best_alignment(genome_sequence, read_sequence)
    best_alignments[read_id] = {"index": best_index, "differences": min_differences}
    


base_counts = {i: {} for i in range(len(genome_sequence))}
for read_id, alignment_info in best_alignments.items():
    best_index = alignment_info['index']
    read_sequence = paired_reads[read_id]

    for i in range(len(read_sequence)):
        genome_base = genome_sequence[best_index + i]
        read_base = read_sequence[i]

        if best_index + i not in base_counts:
            base_counts[best_index + i] = {}

        if read_base not in base_counts[best_index + i]:
            base_counts[best_index + i][read_base] = 1
        else:
            base_counts[best_index + i][read_base] += 1


mutations = []

for index, counts in base_counts.items():
    if len(counts) > 1:
        consensus_bases = [base for base, count in counts.items() if count == max(counts.values())]
        if len(consensus_bases) == 1:
            read_base = consensus_bases[0]
            genome_base = genome_sequence[index]
            if read_base != genome_base:
                mutation_str = ">S{} {} {}".format(index, genome_base, read_base)
                mutations.append({"index": index, "mutation": mutation_str})
                print(mutation_str)

unique_mutations = sorted({mutation["mutation"] for mutation in mutations}, key=lambda x: int(x.split()[0][2:]))


csv_file_path = "predictions.csv"
with open(csv_file_path, "w") as csv_file:
    csv_file.write("mutation\n")
    csv_file.write("\n".join(unique_mutations))

zip_file_path = "predictions.zip"
with zipfile.ZipFile(zip_file_path, "w") as zip_file:
    zip_file.write(csv_file_path, "predictions.csv")
